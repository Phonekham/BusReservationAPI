# Essential Types
type Query {
  # Query For Employees
  employees: [Employee!]
  companies: [Company!]
  busTypes: [BusType!]
  buses: [Bus!]
  routes: [Route!]
  departureTimes: [DepartureTime!]
  seats: [Seat!]
  bookings: [Booking!]
  company(id: ID!): Company!
  employee(id: ID!): Employee!
  busType(id: ID!): BusType!
  bus(id: ID!): Bus!
  route(id: ID!): Route!
  departureTime(id: ID!): DepartureTime!
  # Query For Member
  checkDepartureTime(departureDate: Date!, route: ID!): DepartureTime!
}

type Mutation {
  # auth
  createEmployee(input: EmployeeInput!): Employee!
  loginEmployee(username: String!, password: String!): AuthData!
  registerMember(input: MemberInput!): Member!
  loginMember(username: String!, password: String!): Member!
  # Create
  addCompany(input: CompanyInput!): Company!
  addBusType(input: BusTypeInput!): BusType!
  addBus(input: BusInput!): Bus!
  addRoute(input: RouteInput!): Route!
  addDepartureTime(input: DepartureTimeInput!): DepartureTime!
  addSeat(input: SeatInput!): Seat!
  # Update
  updateCompany(input: UpdateCompanyInput!): Company!
  updateEmployee(input: UpdateEmployeeInput!): Employee!
  updateBusType(input: UpdateBusTypeInput!): BusType!
  updateBus(input: UpdateBusInput!): Bus!
  updateRoute(input: UpdateRouteInput!): Route!
  updateDepartureTime(input: UpdateDepartureTimeInput!): DepartureTime!
  updateSeat(input: UpdateSeatInput!): Seat!
  # Delete
  deleteCompany(id: ID!): Company!
  deleteEmployee(id: ID!): Employee!
  deleteBusType(id: ID!): BusType!
  deleteBus(id: ID!): Bus!
  deleteRoute(id: ID!): Route!
  deleteDepartureTime(id: ID!): DepartureTime!
  deleteSeat(id: ID!): Seat!
  # Services
  bookTicket(input: BookingInput!): Booking!
  saleTicket(input: TicketInput!): Ticket!
}

# scalar Types
scalar Date

# Input Types
input EmployeeInput {
  username: String!
  password: String!
  confirmPassword: String!
  email: String
  address: String
  phone: String
  firstname: String!
  lastname: String!
}
input CompanyInput {
  name: String!
  address: String
  tel: String
  email: String
}
input BusTypeInput {
  type: String!
  description: String
  capacity: Int
}
input BusInput {
  licencePlate: String!
  busType: ID!
  company: ID!
}
input SeatInput {
  number: Int!
  name: String
}
input RouteInput {
  routeEngName: String!
  distance: Int!
  destination: String!
}
input DepartureTimeInput {
  time: String!
  fare: Float!
  isBookable: Boolean!
  busType: ID!
  route: ID!
}
input MemberInput {
  username: String!
  password: String!
  email: String
  phone: String
  firstname: String!
  lastname: String!
}
input TicketInput {
  ticketNo: Int!
  firstname: String!
  lastname: String!
  departureTime: ID!
  bus: ID!
  seat: ID!
  price: Float!
  employee: ID!
}
input BookingInput {
  departureTime: ID!
  bookingItem: ID!
  bookingDate: Date!
  departureDate: Date!
  member: ID!
}

# update input types
input UpdateCompanyInput {
  id: ID!
  name: String
  email: String
  tel: String
  address: String
}
input UpdateEmployeeInput {
  id: ID!
  username: String
  password: String
  email: String
  address: String
  phone: String
  firstname: String
  lastname: String
}
input UpdateBusTypeInput {
  id: ID!
  type: String
  description: String
  capacity: Int
}
input UpdateBusInput {
  id: ID!
  licencePlate: String
  busType: ID
  company: ID
}
input UpdateSeatInput {
  id: ID!
  number: Int
  name: String
}
input UpdateRouteInput {
  id: ID!
  routeName: String
  routeEngName: String
  distance: Int
  departure: String
  destination: String
}
input UpdateDepartureTimeInput {
  id: ID!
  time: String
  fare: Float
  isBookable: Boolean
  busType: ID
  route: ID
}
input UpdateMemberInput {
  id: ID!
  username: String
  password: String
  email: String
  phone: String
  firstname: String
  lastname: String
}

# Custom Types
type AuthData {
  employee: Employee
  jwt: String
}
type User {
  id: ID!
  username: String!
  password: String!
  email: String
  address: String
  phone: String
  firstname: String!
  lastname: String!
}
type BusType {
  id: ID!
  type: String!
  description: String
  capacity: Int
}
type Company {
  id: ID!
  name: String!
  address: String
  tel: String
  email: String
}
type Bus {
  id: ID!
  licencePlate: String!
  busType: BusType!
  company: Company!
}
type Seat {
  id: ID!
  number: Int!
  name: String
}
type Route {
  id: ID!
  routeName: String
  routeEngName: String!
  distance: Int!
  departure: String
  destination: String!
}
type DepartureTime {
  id: ID!
  time: String!
  fare: Float!
  isBookable: Boolean!
  busType: BusType!
  route: Route!
}
type Employee {
  id: ID!
  username: String!
  password: String!
  email: String
  address: String
  phone: String
  firstname: String!
  lastname: String!
}
type Member {
  id: ID!
  username: String!
  password: String!
  email: String
  phone: String
  firstname: String!
  lastname: String!
}
type Ticket {
  id: ID!
  ticketNo: Int!
  firstname: String!
  lastname: String!
  departureTime: DepartureTime!
  bus: Bus!
  seat: Seat!
  price: Float!
  employee: Employee!
}
type BookingItem {
  id: ID!
  seat: Seat!
  firstname: String!
  lastname: String!
}
type Booking {
  id: ID!
  departureTime: DepartureTime!
  bookingItem: BookingItem!
  bookingDate: Date!
  departureDate: Date!
  member: Member!
}
